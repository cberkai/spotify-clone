{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\Search.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useStateValue } from \"../StateProvider\";\nimport AlbumCart from \"../components/AlbumCart\";\nimport \"../css/components/AlbumCartGrid.css\";\nimport GenreGridContainer from \"./GenreGridContainer\";\nimport BASE_URL from \"../helpers/baseUrl\";\n\nfunction Search({\n  history,\n  match\n}) {\n  const [{\n    searchQuery\n  }] = useStateValue();\n  const [{}, dispatch] = useStateValue();\n  const [searchedAlbums, setSearchedAlbums] = useState([]);\n  const [noSearchResults, setNoSearchResults] = useState(false);\n\n  const getSarchResults = param => {\n    fetch(`${BASE_URL}serach.php?query=${param}`).then(response => response.json()).then(data => {\n      setSearchedAlbums(data.albums);\n\n      if (data.albums.length > 0) {\n        setNoSearchResults(false);\n      } else {\n        setNoSearchResults(true);\n      } // history.push(`/search/${searchQuery.trim()}`);\n\n    });\n  };\n\n  useEffect(() => {\n    if (searchQuery.trim() != \"\") {\n      getSarchResults(searchQuery);\n    }\n  }, [searchQuery]);\n  useEffect(() => {\n    dispatch({\n      type: \"SHOW_HIDE_SEARCH_BOX\",\n      item: true\n    });\n    return () => {\n      dispatch({\n        type: \"SHOW_HIDE_SEARCH_BOX\",\n        item: false\n      });\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: searchQuery.trim() == \"\" ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GenreGridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"section-hading\",\n    style: {\n      display: searchedAlbums.length > 0 && searchQuery != \"\" ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Albums\"), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"section-hading\",\n    style: {\n      display: noSearchResults && searchQuery != \"\" ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Nothing found agianst your searched term \\\"\", searchQuery, \"\\\"\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"album-cart-grid\",\n    style: {\n      display: searchQuery.trim() == \"\" ? \"none\" : \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, 170px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, searchedAlbums.map(({\n    id,\n    title,\n    discription,\n    artPath\n  }) => {\n    return /*#__PURE__*/React.createElement(AlbumCart, {\n      title: title,\n      img: artPath,\n      discription: discription,\n      key: id,\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    });\n  })));\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/Search.js"],"names":["React","useEffect","useState","useStateValue","AlbumCart","GenreGridContainer","BASE_URL","Search","history","match","searchQuery","dispatch","searchedAlbums","setSearchedAlbums","noSearchResults","setNoSearchResults","getSarchResults","param","fetch","then","response","json","data","albums","length","trim","type","item","display","gridTemplateColumns","map","id","title","discription","artPath"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport AlbumCart from \"../components/AlbumCart\";\r\nimport \"../css/components/AlbumCartGrid.css\";\r\nimport GenreGridContainer from \"./GenreGridContainer\";\r\nimport BASE_URL from \"../helpers/baseUrl\";\r\n\r\nfunction Search({ history, match }) {\r\n  const [{ searchQuery }] = useStateValue();\r\n  const [{}, dispatch] = useStateValue();\r\n  const [searchedAlbums, setSearchedAlbums] = useState([]);\r\n  const [noSearchResults, setNoSearchResults] = useState(false);\r\n\r\n  const getSarchResults = (param) => {\r\n    fetch(`${BASE_URL}serach.php?query=${param}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setSearchedAlbums(data.albums);\r\n        if (data.albums.length > 0) {\r\n          setNoSearchResults(false);\r\n        } else {\r\n          setNoSearchResults(true);\r\n        }\r\n        // history.push(`/search/${searchQuery.trim()}`);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    if (searchQuery.trim() != \"\") {\r\n      getSarchResults(searchQuery);\r\n    }\r\n  }, [searchQuery]);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"SHOW_HIDE_SEARCH_BOX\",\r\n      item: true,\r\n    });\r\n    return () => {\r\n      dispatch({\r\n        type: \"SHOW_HIDE_SEARCH_BOX\",\r\n        item: false,\r\n      });\r\n    };\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div style={{ display: searchQuery.trim() == \"\" ? \"block\" : \"none\" }}>\r\n        <GenreGridContainer />\r\n      </div>\r\n      <h1\r\n        className=\"section-hading\"\r\n        style={{\r\n          display:\r\n            searchedAlbums.length > 0 && searchQuery != \"\" ? \"block\" : \"none\",\r\n        }}\r\n      >\r\n        Albums\r\n      </h1>\r\n      <h1\r\n        className=\"section-hading\"\r\n        style={{\r\n          display: noSearchResults && searchQuery != \"\" ? \"block\" : \"none\",\r\n        }}\r\n      >\r\n        Nothing found agianst your searched term \"{searchQuery}\"\r\n      </h1>\r\n      <div\r\n        id=\"album-cart-grid\"\r\n        style={{\r\n          display: searchQuery.trim() == \"\" ? \"none\" : \"grid\",\r\n          gridTemplateColumns: \"repeat(auto-fit, 170px)\",\r\n        }}\r\n      >\r\n        {searchedAlbums.map(({ id, title, discription, artPath }) => {\r\n          return (\r\n            <AlbumCart\r\n              title={title}\r\n              img={artPath}\r\n              discription={discription}\r\n              key={id}\r\n              id={id}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}