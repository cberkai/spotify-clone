{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\NowPlayingBar.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/components/NowPlayingBar.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport formatTime from \"../helpers/formatTime\";\nimport likeSong from \"../handlers/likeSong\";\nimport Cookies from \"universal-cookie\";\nimport isBuffering from \"../helpers/isBuffering\";\n\nfunction NowPlayingBar() {\n  var _playlist$currentSong, _playlist$currentSong2, _playlist$currentSong3, _playlist$currentSong4, _playlist$currentSong5, _playlist$currentSong6;\n\n  const [{\n    playlist,\n    user,\n    currentSongId,\n    isPlaying\n  }] = useStateValue();\n  const [{}, dispatch] = useStateValue();\n  const [songTimebarWidth, setSongTimebarWidth] = useState(0);\n  const [songFormattedCurrentTime, setSongFormattedCurrentTime] = useState(\"0:00\");\n  const [isShuffelOn, setIsSuffelOn] = useState(false);\n  const [isRpeatlOn, setIsRepeatOn] = useState(false);\n  const cookies = new Cookies();\n  const [showSongLoadingIndicator, setShowSongLoadingIndicator] = useState(false);\n  const [volumePercentage, setVolumePercentage] = useState(100);\n  const [isMuted, setIsMuted] = useState(false);\n  const [volumeBeforeMuted, setVolumeBeforeMuted] = useState(1);\n  let audio;\n\n  const toggelSongStatus = () => {\n    dispatch({\n      type: \"UPDATE_SONG_STATUS\",\n      item: !isPlaying\n    });\n  };\n\n  const previousSong = () => {\n    dispatch({\n      type: \"SET_CURRENT_SONG_ID\",\n      item: currentSongId > 0 ? currentSongId - 1 : playlist.length - 1\n    });\n  };\n\n  const seekSong = e => {\n    audio = document.getElementById(\"currentPlayingSong\");\n    let percentageClicked = e.offsetX / document.getElementById(\"songTimeBarContainer\").offsetWidth * 100;\n    audio.currentTime = audio.duration * percentageClicked / 100;\n  };\n\n  const toggelSuffelSong = () => {\n    setIsSuffelOn(!isShuffelOn);\n    setIsRepeatOn(false);\n  };\n\n  const toggelRepeatSong = () => {\n    setIsRepeatOn(!isRpeatlOn);\n    setIsSuffelOn(false);\n  };\n\n  useEffect(() => {\n    audio = document.getElementById(\"currentPlayingSong\");\n    isPlaying ? audio.play() : audio.pause();\n  }, [currentSongId, isPlaying, playlist]);\n  useEffect(() => {\n    setSongTimebarWidth(0);\n    audio.addEventListener(\"timeupdate\", () => {\n      setSongTimebarWidth(audio.currentTime / audio.duration * 100);\n      setSongFormattedCurrentTime(formatTime(audio.currentTime));\n    });\n  }, [currentSongId]);\n  useEffect(() => {\n    audio = document.getElementById(\"currentPlayingSong\");\n    document.getElementById(\"songTimeBarContainer\").addEventListener(\"click\", e => {\n      seekSong(e);\n    });\n  }, []);\n\n  const nextSong = (forceNext = false) => {\n    const audio = document.getElementById(\"currentPlayingSong\");\n\n    if (!forceNext) {\n      if (isShuffelOn) {\n        let randomNumber = Math.floor(Math.random() * playlist.length);\n\n        if (randomNumber != currentSongId) {\n          dispatch({\n            type: \"SET_CURRENT_SONG_ID\",\n            item: randomNumber\n          });\n        } else {\n          audio.currentTime = 0;\n          audio.play();\n        }\n      } else if (isRpeatlOn) {\n        // dispatch({\n        //   type: \"SET_CURRENT_SONG_ID\",\n        //   item: currentSongId,\n        // });\n        audio.currentTime = 0;\n        audio.play();\n      } else {\n        dispatch({\n          type: \"SET_CURRENT_SONG_ID\",\n          item: currentSongId < playlist.length - 1 ? currentSongId + 1 : 0\n        });\n      }\n    } else {\n      dispatch({\n        type: \"SET_CURRENT_SONG_ID\",\n        item: currentSongId < playlist.length - 1 ? currentSongId + 1 : 0\n      });\n    }\n  }; //like song\n\n\n  const toggelLikeSong = async () => {\n    if (cookies.get(\"loginToken\")) {\n      if (playlist[currentSongId].id) {\n        const response = await likeSong({\n          token: cookies.get(\"loginToken\"),\n          songId: playlist[currentSongId].id\n        });\n        let temp = playlist;\n        temp[currentSongId].isLikedByUser = response.isLikedSong;\n        dispatch({\n          type: \"SET_PLAYLIST\",\n          item: temp\n        });\n      }\n    }\n  }; // loading indicator\n\n\n  useEffect(() => {\n    if (playlist[currentSongId].id) {\n      setShowSongLoadingIndicator(true);\n    }\n\n    const audio = document.getElementById(\"currentPlayingSong\");\n    audio.addEventListener(\"canplay\", () => {\n      setShowSongLoadingIndicator(false);\n    });\n  }, [playlist, currentSongId]);\n\n  const adgestVolume = e => {\n    const audio = document.getElementById(\"currentPlayingSong\");\n    const ratio = e.nativeEvent.offsetX / document.getElementById(\"volumeBarContainer\").offsetWidth;\n    audio.volume = ratio;\n    setVolumePercentage(ratio * 100); //if user  try to change the volume and the song is muted it should unmute\n\n    audio.muted = false;\n    setIsMuted(false);\n  };\n\n  const toggelMute = () => {\n    const audio = document.getElementById(\"currentPlayingSong\");\n\n    if (!isMuted) {\n      setVolumeBeforeMuted(audio.volume);\n      audio.muted = true;\n      setVolumePercentage(0);\n      setIsMuted(true);\n    } else {\n      audio.volume = volumeBeforeMuted;\n      audio.muted = false;\n      setVolumePercentage(volumeBeforeMuted / 1 * 100);\n      setIsMuted(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"nowplayingBarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"nowplayingBarLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: (_playlist$currentSong = playlist[currentSongId]) === null || _playlist$currentSong === void 0 ? void 0 : _playlist$currentSong.artPath,\n    id: \"nowplayingSonAlbumArtwork\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"nowPlayingSongTittle\",\n    className: \"white-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, (_playlist$currentSong2 = playlist[currentSongId]) === null || _playlist$currentSong2 === void 0 ? void 0 : _playlist$currentSong2.title), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"nowPlayingSongAlbumName\",\n    className: \"silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, (_playlist$currentSong3 = playlist[currentSongId]) === null || _playlist$currentSong3 === void 0 ? void 0 : _playlist$currentSong3.album), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-heart\",\n    id: \"likeSongButton\",\n    onClick: toggelLikeSong,\n    style: {\n      color: ((_playlist$currentSong4 = playlist[currentSongId]) === null || _playlist$currentSong4 === void 0 ? void 0 : _playlist$currentSong4.isLikedByUser) ? \"#1db954\" : \"#b3b3b3\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"nowplayingBarCenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"songControlsConatiner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-random controlIcon\",\n    id: \"shuffle\",\n    onClick: toggelSuffelSong,\n    style: {\n      color: isShuffelOn ? \"#1db954\" : \"#b3b3b3\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-step-backward controlIcon\",\n    id: \"backward\",\n    onClick: previousSong,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"loading-indicator\",\n    style: {\n      display: showSongLoadingIndicator ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-play-circle controlIcon\",\n    id: \"play\",\n    style: {\n      display: isPlaying ? \"none\" : \"block\"\n    },\n    onClick: toggelSongStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-pause-circle controlIcon\",\n    id: \"pause\",\n    style: {\n      display: isPlaying ? \"block\" : \"none\"\n    },\n    onClick: toggelSongStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-step-forward controlIcon\",\n    id: \"forward\",\n    onClick: () => {\n      nextSong(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-retweet controlIcon\",\n    id: \"reapeat\",\n    onClick: toggelRepeatSong,\n    style: {\n      color: isRpeatlOn ? \"#1db954\" : \"#b3b3b3\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"songCurrentTime\",\n    className: \"silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, songFormattedCurrentTime), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"songTimeBarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"songTimeBar\",\n    style: {\n      width: songTimebarWidth + \"%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"songTimeBarCircle\",\n    style: {\n      left: songTimebarWidth + \"%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"songTotalTime\",\n    className: \"silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, (_playlist$currentSong5 = playlist[currentSongId]) === null || _playlist$currentSong5 === void 0 ? void 0 : _playlist$currentSong5.duration))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"nowplayingBarRight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-volume-up controlIcon\",\n    id: \"fullVolume\",\n    onClick: toggelMute,\n    style: {\n      display: volumePercentage > 50 && !isMuted ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-volume-down controlIcon\",\n    id: \"volumeDown\",\n    onClick: toggelMute,\n    style: {\n      display: volumePercentage < 50 && volumePercentage != 0 && !isMuted ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-volume-mute controlIcon\",\n    id: \"volumeMute\",\n    onClick: toggelMute,\n    style: {\n      display: isMuted ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-volume-off controlIcon\",\n    id: \"volumeZero\",\n    style: {\n      display: volumePercentage == 0 && !isMuted ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"adjustVolumeContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"volumeBarContainer\",\n    onClick: adgestVolume,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"volumeBar\",\n    style: {\n      width: volumePercentage + \"%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"circle\",\n    style: {\n      left: volumePercentage + \"%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"audio\", {\n    id: \"currentPlayingSong\",\n    src: (_playlist$currentSong6 = playlist[currentSongId]) === null || _playlist$currentSong6 === void 0 ? void 0 : _playlist$currentSong6.songUrl,\n    onEnded: () => {\n      nextSong(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default NowPlayingBar;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/NowPlayingBar.js"],"names":["React","useEffect","useState","useStateValue","formatTime","likeSong","Cookies","isBuffering","NowPlayingBar","playlist","user","currentSongId","isPlaying","dispatch","songTimebarWidth","setSongTimebarWidth","songFormattedCurrentTime","setSongFormattedCurrentTime","isShuffelOn","setIsSuffelOn","isRpeatlOn","setIsRepeatOn","cookies","showSongLoadingIndicator","setShowSongLoadingIndicator","volumePercentage","setVolumePercentage","isMuted","setIsMuted","volumeBeforeMuted","setVolumeBeforeMuted","audio","toggelSongStatus","type","item","previousSong","length","seekSong","e","document","getElementById","percentageClicked","offsetX","offsetWidth","currentTime","duration","toggelSuffelSong","toggelRepeatSong","play","pause","addEventListener","nextSong","forceNext","randomNumber","Math","floor","random","toggelLikeSong","get","id","response","token","songId","temp","isLikedByUser","isLikedSong","adgestVolume","ratio","nativeEvent","volume","muted","toggelMute","artPath","title","album","color","display","width","alignItems","left","songUrl"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../css/components/NowPlayingBar.css\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport formatTime from \"../helpers/formatTime\";\r\nimport likeSong from \"../handlers/likeSong\";\r\nimport Cookies from \"universal-cookie\";\r\nimport isBuffering from \"../helpers/isBuffering\";\r\n\r\nfunction NowPlayingBar() {\r\n  const [{ playlist, user, currentSongId, isPlaying }] = useStateValue();\r\n  const [{}, dispatch] = useStateValue();\r\n  const [songTimebarWidth, setSongTimebarWidth] = useState(0);\r\n  const [songFormattedCurrentTime, setSongFormattedCurrentTime] = useState(\r\n    \"0:00\"\r\n  );\r\n  const [isShuffelOn, setIsSuffelOn] = useState(false);\r\n  const [isRpeatlOn, setIsRepeatOn] = useState(false);\r\n  const cookies = new Cookies();\r\n  const [showSongLoadingIndicator, setShowSongLoadingIndicator] = useState(\r\n    false\r\n  );\r\n  const [volumePercentage, setVolumePercentage] = useState(100);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [volumeBeforeMuted, setVolumeBeforeMuted] = useState(1);\r\n\r\n  let audio;\r\n\r\n  const toggelSongStatus = () => {\r\n    dispatch({\r\n      type: \"UPDATE_SONG_STATUS\",\r\n      item: !isPlaying,\r\n    });\r\n  };\r\n\r\n  const previousSong = () => {\r\n    dispatch({\r\n      type: \"SET_CURRENT_SONG_ID\",\r\n      item: currentSongId > 0 ? currentSongId - 1 : playlist.length - 1,\r\n    });\r\n  };\r\n\r\n  const seekSong = (e) => {\r\n    audio = document.getElementById(\"currentPlayingSong\");\r\n    let percentageClicked =\r\n      (e.offsetX /\r\n        document.getElementById(\"songTimeBarContainer\").offsetWidth) *\r\n      100;\r\n    audio.currentTime = (audio.duration * percentageClicked) / 100;\r\n  };\r\n\r\n  const toggelSuffelSong = () => {\r\n    setIsSuffelOn(!isShuffelOn);\r\n    setIsRepeatOn(false);\r\n  };\r\n\r\n  const toggelRepeatSong = () => {\r\n    setIsRepeatOn(!isRpeatlOn);\r\n    setIsSuffelOn(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    audio = document.getElementById(\"currentPlayingSong\");\r\n    isPlaying ? audio.play() : audio.pause();\r\n  }, [currentSongId, isPlaying, playlist]);\r\n\r\n  useEffect(() => {\r\n    setSongTimebarWidth(0);\r\n\r\n    audio.addEventListener(\"timeupdate\", () => {\r\n      setSongTimebarWidth((audio.currentTime / audio.duration) * 100);\r\n      setSongFormattedCurrentTime(formatTime(audio.currentTime));\r\n    });\r\n  }, [currentSongId]);\r\n\r\n  useEffect(() => {\r\n    audio = document.getElementById(\"currentPlayingSong\");\r\n    document\r\n      .getElementById(\"songTimeBarContainer\")\r\n      .addEventListener(\"click\", (e) => {\r\n        seekSong(e);\r\n      });\r\n  }, []);\r\n\r\n  const nextSong = (forceNext = false) => {\r\n    const audio = document.getElementById(\"currentPlayingSong\");\r\n    if (!forceNext) {\r\n      if (isShuffelOn) {\r\n        let randomNumber = Math.floor(Math.random() * playlist.length);\r\n        if (randomNumber != currentSongId) {\r\n          dispatch({\r\n            type: \"SET_CURRENT_SONG_ID\",\r\n            item: randomNumber,\r\n          });\r\n        } else {\r\n          audio.currentTime = 0;\r\n          audio.play();\r\n        }\r\n      } else if (isRpeatlOn) {\r\n        // dispatch({\r\n        //   type: \"SET_CURRENT_SONG_ID\",\r\n        //   item: currentSongId,\r\n        // });\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n      } else {\r\n        dispatch({\r\n          type: \"SET_CURRENT_SONG_ID\",\r\n          item: currentSongId < playlist.length - 1 ? currentSongId + 1 : 0,\r\n        });\r\n      }\r\n    } else {\r\n      dispatch({\r\n        type: \"SET_CURRENT_SONG_ID\",\r\n        item: currentSongId < playlist.length - 1 ? currentSongId + 1 : 0,\r\n      });\r\n    }\r\n  };\r\n  //like song\r\n  const toggelLikeSong = async () => {\r\n    if (cookies.get(\"loginToken\")) {\r\n      if (playlist[currentSongId].id) {\r\n        const response = await likeSong({\r\n          token: cookies.get(\"loginToken\"),\r\n          songId: playlist[currentSongId].id,\r\n        });\r\n\r\n        let temp = playlist;\r\n        temp[currentSongId].isLikedByUser = response.isLikedSong;\r\n        dispatch({\r\n          type: \"SET_PLAYLIST\",\r\n          item: temp,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  // loading indicator\r\n  useEffect(() => {\r\n    if (playlist[currentSongId].id) {\r\n      setShowSongLoadingIndicator(true);\r\n    }\r\n    const audio = document.getElementById(\"currentPlayingSong\");\r\n    audio.addEventListener(\"canplay\", () => {\r\n      setShowSongLoadingIndicator(false);\r\n    });\r\n  }, [playlist, currentSongId]);\r\n\r\n  const adgestVolume = (e) => {\r\n    const audio = document.getElementById(\"currentPlayingSong\");\r\n    const ratio =\r\n      e.nativeEvent.offsetX /\r\n      document.getElementById(\"volumeBarContainer\").offsetWidth;\r\n    audio.volume = ratio;\r\n    setVolumePercentage(ratio * 100);\r\n\r\n    //if user  try to change the volume and the song is muted it should unmute\r\n    audio.muted = false;\r\n    setIsMuted(false);\r\n  };\r\n\r\n  const toggelMute = () => {\r\n    const audio = document.getElementById(\"currentPlayingSong\");\r\n    if (!isMuted) {\r\n      setVolumeBeforeMuted(audio.volume);\r\n      audio.muted = true;\r\n      setVolumePercentage(0);\r\n      setIsMuted(true);\r\n    } else {\r\n      audio.volume = volumeBeforeMuted;\r\n      audio.muted = false;\r\n      setVolumePercentage((volumeBeforeMuted / 1) * 100);\r\n      setIsMuted(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"nowplayingBarContainer\">\r\n      <div id=\"nowplayingBarLeft\">\r\n        <img\r\n          src={playlist[currentSongId]?.artPath}\r\n          id=\"nowplayingSonAlbumArtwork\"\r\n        />\r\n        <div>\r\n          <p id=\"nowPlayingSongTittle\" className=\"white-text\">\r\n            {playlist[currentSongId]?.title}\r\n          </p>\r\n\r\n          <p id=\"nowPlayingSongAlbumName\" className=\"silvery-text\">\r\n            {playlist[currentSongId]?.album}\r\n          </p>\r\n          <i\r\n            className=\"fas fa-heart\"\r\n            id=\"likeSongButton\"\r\n            onClick={toggelLikeSong}\r\n            style={{\r\n              color: playlist[currentSongId]?.isLikedByUser\r\n                ? \"#1db954\"\r\n                : \"#b3b3b3\",\r\n            }}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <div id=\"nowplayingBarCenter\">\r\n        <div id=\"songControlsConatiner\">\r\n          <i\r\n            className=\"fas fa-random controlIcon\"\r\n            id=\"shuffle\"\r\n            onClick={toggelSuffelSong}\r\n            style={{ color: isShuffelOn ? \"#1db954\" : \"#b3b3b3\" }}\r\n          ></i>\r\n          <i\r\n            className=\"fas fa-step-backward controlIcon\"\r\n            id=\"backward\"\r\n            onClick={previousSong}\r\n          ></i>\r\n          <div\r\n            id=\"loading-indicator\"\r\n            style={{ display: showSongLoadingIndicator ? \"block\" : \"none\" }}\r\n          ></div>\r\n          <i\r\n            className=\"fas fa-play-circle controlIcon\"\r\n            id=\"play\"\r\n            style={{ display: isPlaying ? \"none\" : \"block\" }}\r\n            onClick={toggelSongStatus}\r\n          ></i>\r\n          <i\r\n            className=\"fas fa-pause-circle controlIcon\"\r\n            id=\"pause\"\r\n            style={{ display: isPlaying ? \"block\" : \"none\" }}\r\n            onClick={toggelSongStatus}\r\n          ></i>\r\n          <i\r\n            className=\"fas fa-step-forward controlIcon\"\r\n            id=\"forward\"\r\n            onClick={() => {\r\n              nextSong(true);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"fas fa-retweet controlIcon\"\r\n            id=\"reapeat\"\r\n            onClick={toggelRepeatSong}\r\n            style={{ color: isRpeatlOn ? \"#1db954\" : \"#b3b3b3\" }}\r\n          ></i>\r\n        </div>\r\n        <div style={{ display: \"flex\", width: \"100%\", alignItems: \"center\" }}>\r\n          <span id=\"songCurrentTime\" className=\"silvery-text\">\r\n            {songFormattedCurrentTime}\r\n          </span>\r\n          <div id=\"songTimeBarContainer\">\r\n            <div\r\n              id=\"songTimeBar\"\r\n              style={{ width: songTimebarWidth + \"%\" }}\r\n            ></div>\r\n            <div\r\n              id=\"songTimeBarCircle\"\r\n              style={{ left: songTimebarWidth + \"%\" }}\r\n            ></div>\r\n          </div>\r\n          <span id=\"songTotalTime\" className=\"silvery-text\">\r\n            {playlist[currentSongId]?.duration}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div id=\"nowplayingBarRight\">\r\n        <i\r\n          className=\"fas fa-volume-up controlIcon\"\r\n          id=\"fullVolume\"\r\n          onClick={toggelMute}\r\n          style={{\r\n            display: volumePercentage > 50 && !isMuted ? \"block\" : \"none\",\r\n          }}\r\n        ></i>\r\n        <i\r\n          className=\"fas fa-volume-down controlIcon\"\r\n          id=\"volumeDown\"\r\n          onClick={toggelMute}\r\n          style={{\r\n            display:\r\n              volumePercentage < 50 && volumePercentage != 0 && !isMuted\r\n                ? \"block\"\r\n                : \"none\",\r\n          }}\r\n        ></i>\r\n        <i\r\n          className=\"fas fa-volume-mute controlIcon\"\r\n          id=\"volumeMute\"\r\n          onClick={toggelMute}\r\n          style={{ display: isMuted ? \"block\" : \"none\" }}\r\n        ></i>\r\n        <i\r\n          className=\"fas fa-volume-off controlIcon\"\r\n          id=\"volumeZero\"\r\n          style={{\r\n            display: volumePercentage == 0 && !isMuted ? \"block\" : \"none\",\r\n          }}\r\n        ></i>\r\n        <div id=\"adjustVolumeContainer\">\r\n          <div id=\"volumeBarContainer\" onClick={adgestVolume}>\r\n            <div id=\"volumeBar\" style={{ width: volumePercentage + \"%\" }}></div>\r\n            <div id=\"circle\" style={{ left: volumePercentage + \"%\" }}></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <audio\r\n        id=\"currentPlayingSong\"\r\n        src={playlist[currentSongId]?.songUrl}\r\n        onEnded={() => {\r\n          nextSong(false);\r\n        }}\r\n      ></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NowPlayingBar;\r\n"]},"metadata":{},"sourceType":"module"}