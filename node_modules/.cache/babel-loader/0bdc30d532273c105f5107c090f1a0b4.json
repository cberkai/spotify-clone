{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\SingleSong.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../css/components/SingleSong.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport { Link } from \"react-router-dom\";\nimport SongPopupOptions from \"./SongPopupOptions\";\n\nfunction SingleSong({\n  id,\n  title,\n  artist,\n  duration,\n  artistId,\n  artPath,\n  showSongArt = false,\n  songList,\n  songId\n}) {\n  var _playlist$currentSong, _playlist$currentSong2, _playlist$currentSong3;\n\n  const [{}, dispatch] = useStateValue();\n  const [{\n    isPlaying,\n    currentSongId,\n    playlist,\n    tempAlbumId,\n    temPlaylist\n  }] = useStateValue();\n\n  const setSong = id => {\n    console.log(songList);\n    dispatch({\n      type: \"SET_PLAYLIST\",\n      item: songList\n    });\n    dispatch({\n      type: \"SET_CURRENT_SONG_ID\",\n      item: id\n    });\n    dispatch({\n      type: \"UPDATE_SONG_STATUS\",\n      item: true\n    });\n    dispatch({\n      type: \"SET_CURRENT_ALBUM_ID\",\n      item: tempAlbumId\n    });\n  };\n\n  const toggelSongStatus = () => {\n    dispatch({\n      type: \"UPDATE_SONG_STATUS\",\n      item: !isPlaying\n    });\n  };\n\n  const showSongOption = (e, id) => {\n    const x = e.nativeEvent.clientX;\n    const y = e.nativeEvent.clientY;\n    let data = {\n      cordinates: {\n        x: x,\n        y: y\n      }\n    };\n    data.songId = id;\n    /*finding wether song is already liked or not and we will check it from temp playlist \r\n    because the use may or may not be listning to this album so we can't reference it from \r\n    reagular playlist*/\n\n    temPlaylist.map(obj => {\n      if (obj.id == id) {\n        data.isLiked = obj.isLikedByUser;\n      }\n    });\n    dispatch({\n      type: \"SONGS_OPTION_DATA\",\n      item: data\n    });\n  };\n\n  const hideSongOptions = e => {\n    if (e.target.classList[0] != \"option\") {\n      dispatch({\n        type: \"SONGS_OPTION_DATA\",\n        item: {}\n      });\n    }\n  };\n\n  useEffect(() => {\n    document.body.addEventListener(\"click\", hideSongOptions);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: ((_playlist$currentSong = playlist[currentSongId]) === null || _playlist$currentSong === void 0 ? void 0 : _playlist$currentSong.id) == songId ? \"single-song-container-active\" : \"single-song-container\",\n    className: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-music silvery-text\",\n    id: \"music-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-play white-text\",\n    id: \"song-play-button\",\n    style: {\n      display: isPlaying && ((_playlist$currentSong2 = playlist[currentSongId]) === null || _playlist$currentSong2 === void 0 ? void 0 : _playlist$currentSong2.id) == songId ? \"none\" : \"\"\n    },\n    onClick: () => {\n      setSong(id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-pause white-text\",\n    id: \"song-play-button\",\n    style: {\n      display: isPlaying && ((_playlist$currentSong3 = playlist[currentSongId]) === null || _playlist$currentSong3 === void 0 ? void 0 : _playlist$currentSong3.id) == songId ? \"block\" : \"none\"\n    },\n    onClick: toggelSongStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), showSongArt ? /*#__PURE__*/React.createElement(\"img\", {\n    src: artPath,\n    id: \"art\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 24\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(\"div\", {\n    id: \"song-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"title\",\n    className: \"white-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, title), /*#__PURE__*/React.createElement(Link, {\n    to: `/artist/${artistId}`,\n    id: \"artsist\",\n    className: \"silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, artist))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"song-options\",\n    onClick: e => {\n      showSongOption(e, songId);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-ellipsis-h white-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"song-duration\",\n    className: \"silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, duration)));\n}\n\nexport default SingleSong;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/SingleSong.js"],"names":["React","useState","useEffect","useStateValue","Link","SongPopupOptions","SingleSong","id","title","artist","duration","artistId","artPath","showSongArt","songList","songId","dispatch","isPlaying","currentSongId","playlist","tempAlbumId","temPlaylist","setSong","console","log","type","item","toggelSongStatus","showSongOption","e","x","nativeEvent","clientX","y","clientY","data","cordinates","map","obj","isLiked","isLikedByUser","hideSongOptions","target","classList","document","body","addEventListener","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../css/components/SingleSong.css\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SongPopupOptions from \"./SongPopupOptions\";\r\n\r\nfunction SingleSong({\r\n  id,\r\n  title,\r\n  artist,\r\n  duration,\r\n  artistId,\r\n  artPath,\r\n  showSongArt = false,\r\n  songList,\r\n  songId,\r\n}) {\r\n  const [{}, dispatch] = useStateValue();\r\n  const [\r\n    { isPlaying, currentSongId, playlist, tempAlbumId, temPlaylist },\r\n  ] = useStateValue();\r\n\r\n  const setSong = (id) => {\r\n    console.log(songList);\r\n    dispatch({\r\n      type: \"SET_PLAYLIST\",\r\n      item: songList,\r\n    });\r\n    dispatch({\r\n      type: \"SET_CURRENT_SONG_ID\",\r\n      item: id,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"UPDATE_SONG_STATUS\",\r\n      item: true,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SET_CURRENT_ALBUM_ID\",\r\n      item: tempAlbumId,\r\n    });\r\n  };\r\n\r\n  const toggelSongStatus = () => {\r\n    dispatch({\r\n      type: \"UPDATE_SONG_STATUS\",\r\n      item: !isPlaying,\r\n    });\r\n  };\r\n\r\n  const showSongOption = (e, id) => {\r\n    const x = e.nativeEvent.clientX;\r\n    const y = e.nativeEvent.clientY;\r\n    let data = {\r\n      cordinates: {\r\n        x: x,\r\n        y: y,\r\n      },\r\n    };\r\n    data.songId = id;\r\n    /*finding wether song is already liked or not and we will check it from temp playlist \r\n    because the use may or may not be listning to this album so we can't reference it from \r\n    reagular playlist*/\r\n    temPlaylist.map((obj) => {\r\n      if (obj.id == id) {\r\n        data.isLiked = obj.isLikedByUser;\r\n      }\r\n    });\r\n\r\n    dispatch({\r\n      type: \"SONGS_OPTION_DATA\",\r\n      item: data,\r\n    });\r\n  };\r\n\r\n  const hideSongOptions = (e) => {\r\n    if (e.target.classList[0] != \"option\") {\r\n      dispatch({\r\n        type: \"SONGS_OPTION_DATA\",\r\n        item: {},\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener(\"click\", hideSongOptions);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      id={\r\n        playlist[currentSongId]?.id == songId\r\n          ? \"single-song-container-active\"\r\n          : \"single-song-container\"\r\n      }\r\n      className=\"active\"\r\n    >\r\n      <div id=\"left\">\r\n        <i className=\"fas fa-music silvery-text\" id=\"music-icon\"></i>\r\n        <i\r\n          className=\"fas fa-play white-text\"\r\n          id=\"song-play-button\"\r\n          style={{\r\n            display:\r\n              isPlaying && playlist[currentSongId]?.id == songId ? \"none\" : \"\",\r\n          }}\r\n          onClick={() => {\r\n            setSong(id);\r\n          }}\r\n        ></i>\r\n        <i\r\n          className=\"fas fa-pause white-text\"\r\n          id=\"song-play-button\"\r\n          style={{\r\n            display:\r\n              isPlaying && playlist[currentSongId]?.id == songId\r\n                ? \"block\"\r\n                : \"none\",\r\n          }}\r\n          onClick={toggelSongStatus}\r\n        ></i>\r\n        {showSongArt ? <img src={artPath} id=\"art\" /> : \"\"}\r\n        <div id=\"song-details\">\r\n          <h3 id=\"title\" className=\"white-text\">\r\n            {title}\r\n          </h3>\r\n          <Link\r\n            to={`/artist/${artistId}`}\r\n            id=\"artsist\"\r\n            className=\"silvery-text\"\r\n          >\r\n            {artist}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div id=\"right\">\r\n        <div\r\n          id=\"song-options\"\r\n          onClick={(e) => {\r\n            showSongOption(e, songId);\r\n          }}\r\n        >\r\n          <i className=\"fas fa-ellipsis-h white-text\"></i>\r\n        </div>\r\n        <p id=\"song-duration\" className=\"silvery-text\">\r\n          {duration}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleSong;\r\n"]},"metadata":{},"sourceType":"module"}