{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\Artist.js\";\nimport React, { useEffect, useState } from \"react\";\nimport AlbumHader from \"./AlbumHader\";\nimport AlbumSongConatiner from \"./AlbumSongConatiner\";\nimport AlbumCart from \"./AlbumCart\";\nimport { useStateValue } from \"../StateProvider\";\nimport Cookies from \"universal-cookie\";\nimport randomcolor from \"randomcolor\";\nimport BASE_URL from \"../helpers/baseUrl\";\n\nfunction Artist({\n  match\n}) {\n  const [album, setAlbum] = useState([]);\n  const [song, setSong] = useState([]);\n  const [artistInfo, setArtistInfo] = useState({});\n  const [{}, dispatch] = useStateValue();\n  const [{\n    playlist,\n    user\n  }] = useStateValue();\n  const cookies = new Cookies();\n  useEffect(() => {\n    fetch(`${BASE_URL}getArtistInfo.php?id=${match.params.id}&token=${cookies.get(\"loginToken\")}`).then(respone => respone.json()).then(data => {\n      setAlbum(data.albums);\n      setSong(data.songs);\n      setArtistInfo(data.artist); // dispatch({\n      //   type: \"SET_PLAYLIST\",\n      //   item: data.songs,\n      // });\n\n      dispatch({\n        type: \"SET_TEMP_ALBUM_ID\",\n        item: 99\n      });\n      dispatch({\n        type: \"SET_TEMP_PALYLIST\",\n        item: data.songs\n      });\n      dispatch({\n        type: \"SET_ALBUM_COLOR\",\n        item: randomcolor()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    return () => {\n      dispatch({\n        type: \"SET_ALBUM_COLOR\",\n        item: \"#121212\"\n      });\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AlbumHader, {\n    title: artistInfo.name,\n    artist: artistInfo.id,\n    img: artistInfo.img,\n    isRoundedImg: true,\n    key: artistInfo.id,\n    songsList: song,\n    albumId: 99,\n    showLikeButton: false,\n    showNumOfLikes: false,\n    type: \"artist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"section-hading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Songs\"), /*#__PURE__*/React.createElement(AlbumSongConatiner, {\n    data: song,\n    showSongArt: true,\n    songsList: song,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), \";\", /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"section-hading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Albums\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"album-cart-grid\",\n    style: {\n      gridTemplateColumns: \"repeat(auto-fit, 170px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, album.map(({\n    id,\n    title,\n    discription,\n    artPath\n  }) => {\n    return /*#__PURE__*/React.createElement(AlbumCart, {\n      title: title,\n      img: artPath,\n      discription: discription,\n      key: id,\n      id: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    });\n  })));\n}\n\nexport default Artist;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/Artist.js"],"names":["React","useEffect","useState","AlbumHader","AlbumSongConatiner","AlbumCart","useStateValue","Cookies","randomcolor","BASE_URL","Artist","match","album","setAlbum","song","setSong","artistInfo","setArtistInfo","dispatch","playlist","user","cookies","fetch","params","id","get","then","respone","json","data","albums","songs","artist","type","item","name","img","gridTemplateColumns","map","title","discription","artPath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAEA,SAASC,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA2B;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC,EAAD,EAAKgB,QAAL,IAAiBZ,aAAa,EAApC;AACA,QAAM,CAAC;AAAEa,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,IAAuBd,aAAa,EAA1C;AACA,QAAMe,OAAO,GAAG,IAAId,OAAJ,EAAhB;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,KAAK,CACF,GAAEb,QAAS,wBAAuBE,KAAK,CAACY,MAAN,CAAaC,EAAG,UAASH,OAAO,CAACI,GAAR,CAC1D,YAD0D,CAE1D,EAHC,CAAL,CAKGC,IALH,CAKSC,OAAD,IAAaA,OAAO,CAACC,IAAR,EALrB,EAMGF,IANH,CAMSG,IAAD,IAAU;AACdhB,MAAAA,QAAQ,CAACgB,IAAI,CAACC,MAAN,CAAR;AACAf,MAAAA,OAAO,CAACc,IAAI,CAACE,KAAN,CAAP;AACAd,MAAAA,aAAa,CAACY,IAAI,CAACG,MAAN,CAAb,CAHc,CAId;AACA;AACA;AACA;;AACAd,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAR;AAIAhB,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,IAAI,EAAEL,IAAI,CAACE;AAFJ,OAAD,CAAR;AAKAb,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAE,iBADC;AAEPC,QAAAA,IAAI,EAAE1B,WAAW;AAFV,OAAD,CAAR;AAID,KA3BH;AA4BD,GA7BQ,EA6BN,EA7BM,CAAT;AA+BAP,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXiB,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAE,iBADC;AAEPC,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAR;AAID,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAElB,UAAU,CAACmB,IADpB;AAEE,IAAA,MAAM,EAAEnB,UAAU,CAACQ,EAFrB;AAGE,IAAA,GAAG,EAAER,UAAU,CAACoB,GAHlB;AAIE,IAAA,YAAY,EAAE,IAJhB;AAKE,IAAA,GAAG,EAAEpB,UAAU,CAACQ,EALlB;AAME,IAAA,SAAS,EAAEV,IANb;AAOE,IAAA,OAAO,EAAE,EAPX;AAQE,IAAA,cAAc,EAAE,KARlB;AASE,IAAA,cAAc,EAAE,KATlB;AAUE,IAAA,IAAI,EAAC,QAVP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAaE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAbF,eAcE,oBAAC,kBAAD;AAAoB,IAAA,IAAI,EAAEA,IAA1B;AAAgC,IAAA,WAAW,EAAE,IAA7C;AAAmD,IAAA,SAAS,EAAEA,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,oBAeE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eAgBE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,KAAK,EAAE;AAAEuB,MAAAA,mBAAmB,EAAE;AAAvB,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGzB,KAAK,CAAC0B,GAAN,CAAU,CAAC;AAAEd,IAAAA,EAAF;AAAMe,IAAAA,KAAN;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA;AAA1B,GAAD,KAAyC;AAClD,wBACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,GAAG,EAAEE,OAFP;AAGE,MAAA,WAAW,EAAED,WAHf;AAIE,MAAA,GAAG,EAAEhB,EAJP;AAKE,MAAA,EAAE,EAAEA,EALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVA,CAJH,CAhBF,CADF;AAmCD;;AAED,eAAed,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AlbumHader from \"./AlbumHader\";\r\nimport AlbumSongConatiner from \"./AlbumSongConatiner\";\r\nimport AlbumCart from \"./AlbumCart\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport Cookies from \"universal-cookie\";\r\nimport randomcolor from \"randomcolor\";\r\nimport BASE_URL from \"../helpers/baseUrl\";\r\n\r\nfunction Artist({ match }) {\r\n  const [album, setAlbum] = useState([]);\r\n  const [song, setSong] = useState([]);\r\n  const [artistInfo, setArtistInfo] = useState({});\r\n  const [{}, dispatch] = useStateValue();\r\n  const [{ playlist, user }] = useStateValue();\r\n  const cookies = new Cookies();\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `${BASE_URL}getArtistInfo.php?id=${match.params.id}&token=${cookies.get(\r\n        \"loginToken\"\r\n      )}`\r\n    )\r\n      .then((respone) => respone.json())\r\n      .then((data) => {\r\n        setAlbum(data.albums);\r\n        setSong(data.songs);\r\n        setArtistInfo(data.artist);\r\n        // dispatch({\r\n        //   type: \"SET_PLAYLIST\",\r\n        //   item: data.songs,\r\n        // });\r\n        dispatch({\r\n          type: \"SET_TEMP_ALBUM_ID\",\r\n          item: 99,\r\n        });\r\n        dispatch({\r\n          type: \"SET_TEMP_PALYLIST\",\r\n          item: data.songs,\r\n        });\r\n\r\n        dispatch({\r\n          type: \"SET_ALBUM_COLOR\",\r\n          item: randomcolor(),\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch({\r\n        type: \"SET_ALBUM_COLOR\",\r\n        item: \"#121212\",\r\n      });\r\n    };\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <AlbumHader\r\n        title={artistInfo.name}\r\n        artist={artistInfo.id}\r\n        img={artistInfo.img}\r\n        isRoundedImg={true}\r\n        key={artistInfo.id}\r\n        songsList={song}\r\n        albumId={99}\r\n        showLikeButton={false}\r\n        showNumOfLikes={false}\r\n        type=\"artist\"\r\n      />\r\n      <h1 className=\"section-hading\">Songs</h1>\r\n      <AlbumSongConatiner data={song} showSongArt={true} songsList={song} />;\r\n      <h1 className=\"section-hading\">Albums</h1>\r\n      <div\r\n        id=\"album-cart-grid\"\r\n        style={{ gridTemplateColumns: \"repeat(auto-fit, 170px)\" }}\r\n      >\r\n        {album.map(({ id, title, discription, artPath }) => {\r\n          return (\r\n            <AlbumCart\r\n              title={title}\r\n              img={artPath}\r\n              discription={discription}\r\n              key={id}\r\n              id={id}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Artist;\r\n"]},"metadata":{},"sourceType":"module"}