{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\Album.js\";\nimport React, { useEffect, useState } from \"react\";\nimport AlbumHader from \"./AlbumHader\";\nimport AlbumSongConatiner from \"./AlbumSongConatiner\";\nimport { useStateValue } from \"../StateProvider\";\nimport Cookies from \"universal-cookie\";\nimport BASE_URL from \"../helpers/baseUrl\";\n\nfunction Album({\n  match\n}) {\n  const [album, setAlbum] = useState([]);\n  const [song, setSong] = useState([]);\n  const [{}, dispatch] = useStateValue();\n  const [{\n    playlist,\n    user,\n    currentPlayingAlbumId\n  }] = useStateValue();\n  const cookies = new Cookies();\n  useEffect(() => {\n    fetch(`${BASE_URL}getAlbumInfo.php?id=${match.params.id}&token=${cookies.get(\"loginToken\")}`).then(respone => respone.json()).then(data => {\n      //\n      setAlbum([data.album]);\n      setSong(data.songs);\n      dispatch({\n        type: \"SET_TEMP_ALBUM_ID\",\n        item: data.album.id\n      });\n      dispatch({\n        type: \"SET_TEMP_PALYLIST\",\n        item: data.songs\n      });\n      dispatch({\n        type: \"SET_ALBUM_COLOR\",\n        item: data.album.albumColor\n      });\n    });\n    return () => {\n      dispatch({\n        type: \"SET_ALBUM_COLOR\",\n        item: \"#121212\"\n      });\n      dispatch({\n        type: \"SET_TEMP_ALBUM_ID\",\n        item: currentPlayingAlbumId\n      });\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, album.map(album => {\n    return /*#__PURE__*/React.createElement(AlbumHader, {\n      id: album.id,\n      title: album.title,\n      artist: album.artist,\n      discription: album.discription,\n      likes: album.likes,\n      img: album.artPath,\n      key: album.id,\n      id: album.id,\n      songsList: song,\n      albumId: album.id,\n      isLikedByUser: album.isLikedByUser,\n      type: \"album\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    });\n  }), /*#__PURE__*/React.createElement(AlbumSongConatiner, {\n    data: song,\n    songsList: song,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Album;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/Album.js"],"names":["React","useEffect","useState","AlbumHader","AlbumSongConatiner","useStateValue","Cookies","BASE_URL","Album","match","album","setAlbum","song","setSong","dispatch","playlist","user","currentPlayingAlbumId","cookies","fetch","params","id","get","then","respone","json","data","songs","type","item","albumColor","map","title","artist","discription","likes","artPath","isLikedByUser"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AlbumHader from \"./AlbumHader\";\r\nimport AlbumSongConatiner from \"./AlbumSongConatiner\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport Cookies from \"universal-cookie\";\r\nimport BASE_URL from \"../helpers/baseUrl\";\r\n\r\nfunction Album({ match }) {\r\n  const [album, setAlbum] = useState([]);\r\n  const [song, setSong] = useState([]);\r\n  const [{}, dispatch] = useStateValue();\r\n  const [{ playlist, user, currentPlayingAlbumId }] = useStateValue();\r\n  const cookies = new Cookies();\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `${BASE_URL}getAlbumInfo.php?id=${match.params.id}&token=${cookies.get(\r\n        \"loginToken\"\r\n      )}`\r\n    )\r\n      .then((respone) => respone.json())\r\n      .then((data) => {\r\n        //\r\n        setAlbum([data.album]);\r\n        setSong(data.songs);\r\n        dispatch({\r\n          type: \"SET_TEMP_ALBUM_ID\",\r\n          item: data.album.id,\r\n        });\r\n        dispatch({\r\n          type: \"SET_TEMP_PALYLIST\",\r\n          item: data.songs,\r\n        });\r\n        dispatch({\r\n          type: \"SET_ALBUM_COLOR\",\r\n          item: data.album.albumColor,\r\n        });\r\n      });\r\n\r\n    return () => {\r\n      dispatch({\r\n        type: \"SET_ALBUM_COLOR\",\r\n        item: \"#121212\",\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_TEMP_ALBUM_ID\",\r\n        item: currentPlayingAlbumId,\r\n      });\r\n    };\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {album.map((album) => {\r\n        return (\r\n          <AlbumHader\r\n            id={album.id}\r\n            title={album.title}\r\n            artist={album.artist}\r\n            discription={album.discription}\r\n            likes={album.likes}\r\n            img={album.artPath}\r\n            key={album.id}\r\n            id={album.id}\r\n            songsList={song}\r\n            albumId={album.id}\r\n            isLikedByUser={album.isLikedByUser}\r\n            type=\"album\"\r\n          />\r\n        );\r\n      })}\r\n      <AlbumSongConatiner data={song} songsList={song} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Album;\r\n"]},"metadata":{},"sourceType":"module"}