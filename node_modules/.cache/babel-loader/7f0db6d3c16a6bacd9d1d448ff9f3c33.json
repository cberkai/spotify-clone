{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\SongPopupOptions.js\";\nimport React, { useEffect } from \"react\";\nimport \"../css/components/SongPopupOptions.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport likeSong from \"../handlers/likeSong\";\nimport Cookies from \"universal-cookie\";\nimport { toast } from \"react-toastify\";\n\nfunction SongPopupOptions() {\n  var _songOptionnsData$cor, _songOptionnsData$cor2;\n\n  const [{\n    songOptionnsData,\n    playlist,\n    temPlaylist\n  }] = useStateValue();\n  const [{}, dispatch] = useStateValue();\n  const [{\n    user\n  }] = useStateValue();\n  const cookies = new Cookies();\n\n  const toggelLikeSong = async () => {\n    const songId = songOptionnsData.songId;\n    dispatch({\n      type: \"SONGS_OPTION_DATA\",\n      item: {}\n    });\n\n    if (user.name) {\n      const response = await likeSong({\n        token: cookies.get(\"loginToken\"),\n        songId: songId\n      });\n      /*Now we are going to update the staus liked or not by finding the the song in \r\n      temp as well as well as in regular playlisr*/\n      //   let temp = playlist;\n      //   temp[currentSongId].isLikedByUser = response.isLikedSong;\n\n      let temp = playlist;\n      temp.map((obj, i) => {\n        if (obj.id == songId) {\n          temp[i].isLikedByUser = response.isLikedSong;\n          dispatch({\n            type: \"SET_PLAYLIST\",\n            item: temp\n          });\n        }\n      });\n      temp = temPlaylist;\n      temp.map((obj, i) => {\n        if (obj.id == songId) {\n          temp[i].isLikedByUser = response.isLikedSong;\n        }\n      });\n      dispatch({\n        type: \"SET_TEMP_PALYLISTT\",\n        item: temp\n      }); //show status to user\n\n      if (response.isLikedSong) {\n        toast.info(\"Added to your Liked Songs ðŸ’š\");\n      } else {\n        toast.info(\"Remove from your Liked Songs \");\n      }\n    } else {\n      toast.info(\"Login to add this song to your Liked Songs \");\n    }\n  };\n\n  const showAddToPlaylistModel = () => {\n    if (user.name) {\n      dispatch({\n        type: \"SHOW_HIDE_ADD_TO_PLAYLIST_MODEL\",\n        item: true\n      });\n      dispatch({\n        type: \"ADD_TO_PLAYLIST_DATA\",\n        item: {\n          songId: songOptionnsData.songId\n        }\n      });\n    } else {\n      toast.info(\"Login to start creating Playlists\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"song-popup-options-conatiner\",\n    style: {\n      left: ((_songOptionnsData$cor = songOptionnsData.cordinates) === null || _songOptionnsData$cor === void 0 ? void 0 : _songOptionnsData$cor.x) - 200,\n      top: ((_songOptionnsData$cor2 = songOptionnsData.cordinates) === null || _songOptionnsData$cor2 === void 0 ? void 0 : _songOptionnsData$cor2.y) - 140,\n      display: songOptionnsData.cordinates ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"save-liked-songs\",\n    className: \"option\",\n    onClick: toggelLikeSong,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"option silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, songOptionnsData.isLiked ? \"Remove from your Liked Songs\" : \"Save to your Liked Songs\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"add-to-playlist\",\n    className: \"option\",\n    onClick: showAddToPlaylistModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"option silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Add to Playlist\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"copy-song-link\",\n    className: \"option\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"option silvery-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"Copy Song Link\")));\n}\n\nexport default SongPopupOptions;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/SongPopupOptions.js"],"names":["React","useEffect","useStateValue","likeSong","Cookies","toast","SongPopupOptions","songOptionnsData","playlist","temPlaylist","dispatch","user","cookies","toggelLikeSong","songId","type","item","name","response","token","get","temp","map","obj","i","id","isLikedByUser","isLikedSong","info","showAddToPlaylistModel","left","cordinates","x","top","y","display","isLiked"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"../css/components/SongPopupOptions.css\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport likeSong from \"../handlers/likeSong\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction SongPopupOptions() {\r\n  const [{ songOptionnsData, playlist, temPlaylist }] = useStateValue();\r\n  const [{}, dispatch] = useStateValue();\r\n  const [{ user }] = useStateValue();\r\n  const cookies = new Cookies();\r\n\r\n  const toggelLikeSong = async () => {\r\n    const songId = songOptionnsData.songId;\r\n    dispatch({\r\n      type: \"SONGS_OPTION_DATA\",\r\n      item: {},\r\n    });\r\n    if (user.name) {\r\n      const response = await likeSong({\r\n        token: cookies.get(\"loginToken\"),\r\n        songId: songId,\r\n      });\r\n      /*Now we are going to update the staus liked or not by finding the the song in \r\n      temp as well as well as in regular playlisr*/\r\n      //   let temp = playlist;\r\n      //   temp[currentSongId].isLikedByUser = response.isLikedSong;\r\n      let temp = playlist;\r\n      temp.map((obj, i) => {\r\n        if (obj.id == songId) {\r\n          temp[i].isLikedByUser = response.isLikedSong;\r\n          dispatch({\r\n            type: \"SET_PLAYLIST\",\r\n            item: temp,\r\n          });\r\n        }\r\n      });\r\n\r\n      temp = temPlaylist;\r\n      temp.map((obj, i) => {\r\n        if (obj.id == songId) {\r\n          temp[i].isLikedByUser = response.isLikedSong;\r\n        }\r\n      });\r\n      dispatch({\r\n        type: \"SET_TEMP_PALYLISTT\",\r\n        item: temp,\r\n      });\r\n\r\n      //show status to user\r\n      if (response.isLikedSong) {\r\n        toast.info(\"Added to your Liked Songs ðŸ’š\");\r\n      } else {\r\n        toast.info(\"Remove from your Liked Songs \");\r\n      }\r\n    } else {\r\n      toast.info(\"Login to add this song to your Liked Songs \");\r\n    }\r\n  };\r\n\r\n  const showAddToPlaylistModel = () => {\r\n    if (user.name) {\r\n      dispatch({\r\n        type: \"SHOW_HIDE_ADD_TO_PLAYLIST_MODEL\",\r\n        item: true,\r\n      });\r\n\r\n      dispatch({\r\n        type: \"ADD_TO_PLAYLIST_DATA\",\r\n        item: { songId: songOptionnsData.songId },\r\n      });\r\n    } else {\r\n      toast.info(\"Login to start creating Playlists\");\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      id=\"song-popup-options-conatiner\"\r\n      style={{\r\n        left: songOptionnsData.cordinates?.x - 200,\r\n        top: songOptionnsData.cordinates?.y - 140,\r\n        display: songOptionnsData.cordinates ? \"block\" : \"none\",\r\n      }}\r\n    >\r\n      <div id=\"save-liked-songs\" className=\"option\" onClick={toggelLikeSong}>\r\n        <p className=\"option silvery-text\">\r\n          {songOptionnsData.isLiked\r\n            ? \"Remove from your Liked Songs\"\r\n            : \"Save to your Liked Songs\"}\r\n        </p>\r\n      </div>\r\n\r\n      <div\r\n        id=\"add-to-playlist\"\r\n        className=\"option\"\r\n        onClick={showAddToPlaylistModel}\r\n      >\r\n        <p className=\"option silvery-text\">Add to Playlist</p>\r\n      </div>\r\n\r\n      <div id=\"copy-song-link\" className=\"option\">\r\n        <p className=\"option silvery-text\">Copy Song Link</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongPopupOptions;\r\n"]},"metadata":{},"sourceType":"module"}