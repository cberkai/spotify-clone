{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\CreateAlbumPopup.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../css/components/CreateAlbumPopup.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport createPlaylist from \"../handlers/createPlaylist\";\nimport Cookies from \"universal-cookie\";\nimport { toast } from \"react-toastify\";\n\nfunction CreateAlbumPopup() {\n  const [{}, dispatch] = useStateValue();\n  const [{\n    showPopupPlaylistForm,\n    userPlaylists\n  }] = useStateValue();\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const cookies = new Cookies();\n  useEffect(() => {\n    setPlaylistName(\"\");\n  }, []);\n\n  const closeForm = () => {\n    dispatch({\n      type: \"SHOW_HIDE_PLAYLIST_POPUP_FORM\",\n      item: false\n    });\n    setPlaylistName(\"\");\n  };\n\n  const handelInputChange = e => {\n    setPlaylistName(e.target.value);\n  };\n\n  const createPlaylist1 = async () => {\n    dispatch({\n      type: \"SHOW_HIDE_PLAYLIST_POPUP_FORM\",\n      item: false\n    });\n    const response = await createPlaylist({\n      token: cookies.get(\"loginToken\"),\n      playlistName: playlistName\n    });\n\n    if (response.isCreated) {\n      let temp = userPlaylists;\n      temp.push({\n        id: response.id,\n        title: response.title\n      });\n      dispatch({\n        type: \"SET_USER_PLAYLISTS\",\n        item: temp\n      });\n      toast.info(`Playlist ${response.title} has been created`);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"create-album-poup\",\n    style: {\n      display: showPopupPlaylistForm ? \"block\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"close\",\n    onClick: closeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"white-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Create new playlist\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"playlist-name-input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"inner-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"white-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Playlist Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    autoComplete: \"false\",\n    placeholder: \"New Playlist\",\n    value: playlistName,\n    onChange: handelInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"button-conatiner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: closeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createPlaylist1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Create\"))));\n}\n\nexport default CreateAlbumPopup;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/CreateAlbumPopup.js"],"names":["React","useState","useEffect","useStateValue","createPlaylist","Cookies","toast","CreateAlbumPopup","dispatch","showPopupPlaylistForm","userPlaylists","playlistName","setPlaylistName","cookies","closeForm","type","item","handelInputChange","e","target","value","createPlaylist1","response","token","get","isCreated","temp","push","id","title","info","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../css/components/CreateAlbumPopup.css\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport createPlaylist from \"../handlers/createPlaylist\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction CreateAlbumPopup() {\r\n  const [{}, dispatch] = useStateValue();\r\n  const [{ showPopupPlaylistForm, userPlaylists }] = useStateValue();\r\n  const [playlistName, setPlaylistName] = useState(\"\");\r\n  const cookies = new Cookies();\r\n  useEffect(() => {\r\n    setPlaylistName(\"\");\r\n  }, []);\r\n  const closeForm = () => {\r\n    dispatch({\r\n      type: \"SHOW_HIDE_PLAYLIST_POPUP_FORM\",\r\n      item: false,\r\n    });\r\n    setPlaylistName(\"\");\r\n  };\r\n  const handelInputChange = (e) => {\r\n    setPlaylistName(e.target.value);\r\n  };\r\n  const createPlaylist1 = async () => {\r\n    dispatch({\r\n      type: \"SHOW_HIDE_PLAYLIST_POPUP_FORM\",\r\n      item: false,\r\n    });\r\n    const response = await createPlaylist({\r\n      token: cookies.get(\"loginToken\"),\r\n      playlistName: playlistName,\r\n    });\r\n\r\n    if (response.isCreated) {\r\n      let temp = userPlaylists;\r\n      temp.push({\r\n        id: response.id,\r\n        title: response.title,\r\n      });\r\n      dispatch({\r\n        type: \"SET_USER_PLAYLISTS\",\r\n        item: temp,\r\n      });\r\n      toast.info(`Playlist ${response.title} has been created`);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      id=\"create-album-poup\"\r\n      style={{ display: showPopupPlaylistForm ? \"block\" : \"none\" }}\r\n    >\r\n      <div id=\"inner\">\r\n        <div className=\"close\" onClick={closeForm}></div>\r\n        <h1 className=\"white-text\">Create new playlist</h1>\r\n        <div id=\"playlist-name-input-field\">\r\n          <div id=\"inner-input\">\r\n            <p className=\"white-text\">Playlist Name</p>\r\n            <input\r\n              type=\"text\"\r\n              autoComplete=\"false\"\r\n              placeholder=\"New Playlist\"\r\n              value={playlistName}\r\n              onChange={handelInputChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"button-conatiner\">\r\n          <button onClick={closeForm}>Cancel</button>\r\n          <button onClick={createPlaylist1}>Create</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateAlbumPopup;\r\n"]},"metadata":{},"sourceType":"module"}