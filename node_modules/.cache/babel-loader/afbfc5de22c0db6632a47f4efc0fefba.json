{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berka\\\\Desktop\\\\clone\\\\spotify-clone\\\\react-spotify-clone\\\\src\\\\components\\\\Playlist.js\";\nimport React, { useEffect, useState } from \"react\";\nimport AlbumHader from \"./AlbumHader\";\nimport AlbumSongConatiner from \"./AlbumSongConatiner\";\nimport { useStateValue } from \"../StateProvider\";\nimport Cookies from \"universal-cookie\";\nimport randomcolor from \"randomcolor\";\nimport BASE_URL from \"../helpers/baseUrl\";\n\nfunction Playlist(props) {\n  const [album, setAlbum] = useState([]);\n  const [song, setSong] = useState([]);\n  const [{}, dispatch] = useStateValue();\n  const [{\n    playlist,\n    user,\n    currentPlayingAlbumId\n  }] = useStateValue();\n  const cookies = new Cookies();\n  useEffect(() => {\n    fetch(`${BASE_URL}getPlaylistInfo.php?playlistId=${props.match.params.id}&token=${cookies.get(\"loginToken\")}`).then(respone => respone.json()).then(data => {\n      setAlbum([{\n        id: data.id,\n        title: data.title\n      }]);\n      setSong(data.songs);\n      dispatch({\n        type: \"SET_TEMP_ALBUM_ID\",\n        item: data.id\n      });\n      dispatch({\n        type: \"SET_TEMP_PALYLIST\",\n        item: data.songs\n      });\n      dispatch({\n        type: \"SET_ALBUM_COLOR\",\n        item: randomcolor()\n      });\n    });\n    return () => {\n      dispatch({\n        type: \"SET_ALBUM_COLOR\",\n        item: \"#121212\"\n      });\n      dispatch({\n        type: \"SET_TEMP_ALBUM_ID\",\n        item: currentPlayingAlbumId\n      });\n    };\n  }, [props.match.params.id]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, album.map(album => {\n    return /*#__PURE__*/React.createElement(AlbumHader, {\n      title: album.title,\n      artist: user.name,\n      key: album.id,\n      id: album.id,\n      songsList: song,\n      albumId: album.id,\n      type: \"playlist\",\n      showLikeButton: false,\n      showOptionsButton: false,\n      showNumOfLikes: false,\n      showAlbumArt: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    });\n  }), /*#__PURE__*/React.createElement(AlbumSongConatiner, {\n    data: song,\n    songsList: song,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Playlist;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/components/Playlist.js"],"names":["React","useEffect","useState","AlbumHader","AlbumSongConatiner","useStateValue","Cookies","randomcolor","BASE_URL","Playlist","props","album","setAlbum","song","setSong","dispatch","playlist","user","currentPlayingAlbumId","cookies","fetch","match","params","id","get","then","respone","json","data","title","songs","type","item","map","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AlbumHader from \"./AlbumHader\";\r\nimport AlbumSongConatiner from \"./AlbumSongConatiner\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport Cookies from \"universal-cookie\";\r\nimport randomcolor from \"randomcolor\";\r\nimport BASE_URL from \"../helpers/baseUrl\";\r\n\r\nfunction Playlist(props) {\r\n  const [album, setAlbum] = useState([]);\r\n  const [song, setSong] = useState([]);\r\n  const [{}, dispatch] = useStateValue();\r\n  const [{ playlist, user, currentPlayingAlbumId }] = useStateValue();\r\n  const cookies = new Cookies();\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `${BASE_URL}getPlaylistInfo.php?playlistId=${\r\n        props.match.params.id\r\n      }&token=${cookies.get(\"loginToken\")}`\r\n    )\r\n      .then((respone) => respone.json())\r\n      .then((data) => {\r\n        setAlbum([{ id: data.id, title: data.title }]);\r\n        setSong(data.songs);\r\n        dispatch({\r\n          type: \"SET_TEMP_ALBUM_ID\",\r\n          item: data.id,\r\n        });\r\n        dispatch({\r\n          type: \"SET_TEMP_PALYLIST\",\r\n          item: data.songs,\r\n        });\r\n        dispatch({\r\n          type: \"SET_ALBUM_COLOR\",\r\n          item: randomcolor(),\r\n        });\r\n      });\r\n\r\n    return () => {\r\n      dispatch({\r\n        type: \"SET_ALBUM_COLOR\",\r\n        item: \"#121212\",\r\n      });\r\n\r\n      dispatch({\r\n        type: \"SET_TEMP_ALBUM_ID\",\r\n        item: currentPlayingAlbumId,\r\n      });\r\n    };\r\n  }, [props.match.params.id]);\r\n  return (\r\n    <div>\r\n      {album.map((album) => {\r\n        return (\r\n          <AlbumHader\r\n            title={album.title}\r\n            artist={user.name}\r\n            key={album.id}\r\n            id={album.id}\r\n            songsList={song}\r\n            albumId={album.id}\r\n            type=\"playlist\"\r\n            showLikeButton={false}\r\n            showOptionsButton={false}\r\n            showNumOfLikes={false}\r\n            showAlbumArt={false}\r\n          />\r\n        );\r\n      })}\r\n      <AlbumSongConatiner data={song} songsList={song} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Playlist;\r\n"]},"metadata":{},"sourceType":"module"}