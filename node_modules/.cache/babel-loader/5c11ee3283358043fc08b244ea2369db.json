{"ast":null,"code":"var lastPlayPos = 0;\nvar currentPlayPos = 0;\nvar bufferingDetected = false;\nlet checkInterval = 50.0;\n\nfunction isBuffering(audio) {\n  let player = audio;\n  currentPlayPos = player.currentTime; // checking offset should be at most the check interval\n  // but allow for some margin\n\n  var offset = (checkInterval - 20) / 1000; // if no buffering is currently detected,\n  // and the position does not seem to increase\n  // and the player isn't manually paused...\n\n  if (!bufferingDetected && currentPlayPos < lastPlayPos + offset && !player.paused) {\n    bufferingDetected = true;\n  } // if we were buffering but the player has advanced,\n  // then there is no buffering\n\n\n  if (bufferingDetected && currentPlayPos > lastPlayPos + offset && !player.paused) {\n    bufferingDetected = false;\n  }\n\n  lastPlayPos = currentPlayPos;\n  return bufferingDetected;\n}\n\nexport default isBuffering;","map":{"version":3,"sources":["C:/Users/berka/Desktop/clone/spotify-clone/react-spotify-clone/src/helpers/isBuffering.js"],"names":["lastPlayPos","currentPlayPos","bufferingDetected","checkInterval","isBuffering","audio","player","currentTime","offset","paused"],"mappings":"AAAA,IAAIA,WAAW,GAAG,CAAlB;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,iBAAiB,GAAG,KAAxB;AACA,IAAIC,aAAa,GAAG,IAApB;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIC,MAAM,GAAGD,KAAb;AACAJ,EAAAA,cAAc,GAAGK,MAAM,CAACC,WAAxB,CAF0B,CAI1B;AACA;;AACA,MAAIC,MAAM,GAAG,CAACL,aAAa,GAAG,EAAjB,IAAuB,IAApC,CAN0B,CAQ1B;AACA;AACA;;AACA,MACE,CAACD,iBAAD,IACAD,cAAc,GAAGD,WAAW,GAAGQ,MAD/B,IAEA,CAACF,MAAM,CAACG,MAHV,EAIE;AACAP,IAAAA,iBAAiB,GAAG,IAApB;AACD,GAjByB,CAmB1B;AACA;;;AACA,MACEA,iBAAiB,IACjBD,cAAc,GAAGD,WAAW,GAAGQ,MAD/B,IAEA,CAACF,MAAM,CAACG,MAHV,EAIE;AACAP,IAAAA,iBAAiB,GAAG,KAApB;AACD;;AACDF,EAAAA,WAAW,GAAGC,cAAd;AAEA,SAAOC,iBAAP;AACD;;AAED,eAAeE,WAAf","sourcesContent":["var lastPlayPos = 0;\r\nvar currentPlayPos = 0;\r\nvar bufferingDetected = false;\r\nlet checkInterval = 50.0;\r\nfunction isBuffering(audio) {\r\n  let player = audio;\r\n  currentPlayPos = player.currentTime;\r\n\r\n  // checking offset should be at most the check interval\r\n  // but allow for some margin\r\n  var offset = (checkInterval - 20) / 1000;\r\n\r\n  // if no buffering is currently detected,\r\n  // and the position does not seem to increase\r\n  // and the player isn't manually paused...\r\n  if (\r\n    !bufferingDetected &&\r\n    currentPlayPos < lastPlayPos + offset &&\r\n    !player.paused\r\n  ) {\r\n    bufferingDetected = true;\r\n  }\r\n\r\n  // if we were buffering but the player has advanced,\r\n  // then there is no buffering\r\n  if (\r\n    bufferingDetected &&\r\n    currentPlayPos > lastPlayPos + offset &&\r\n    !player.paused\r\n  ) {\r\n    bufferingDetected = false;\r\n  }\r\n  lastPlayPos = currentPlayPos;\r\n\r\n  return bufferingDetected;\r\n}\r\n\r\nexport default isBuffering;\r\n"]},"metadata":{},"sourceType":"module"}